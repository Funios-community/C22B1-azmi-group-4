/*

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

/*

answer is https://stackoverflow.com/questions/1818186/cant-quite-get-project-euler-problem-2-figured-out

fibonanci always odd,odd,even - odd,odd,even
*/
import Foundation

func sumEvenFibo(_ maxN: Int) -> Int {
    var jumlah = 0
    var (a,b,c) = (0,1,2)
    repeat {
        jumlah = jumlah + c
        print(" c : \(c) | jumlah : \(jumlah) ")
        a = b + c
        b = a + c
        c = a + b


    } while (jumlah<maxN) 
    return jumlah
}
print(sumEvenFibo(4000000))

